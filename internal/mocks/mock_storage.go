// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nktau/employee-service/internal/storagelayer (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/nktau/employee-service/internal/common"
	storagelayer "github.com/nktau/employee-service/internal/storagelayer"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage) Create(arg0 common.EmployeeScheme) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockStorage) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), arg0)
}

// GetEmployeesByCompanyAndDepartment mocks base method.
func (m *MockStorage) GetEmployeesByCompanyAndDepartment(arg0 int, arg1 string) ([]storagelayer.EmployeeDBScheme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeesByCompanyAndDepartment", arg0, arg1)
	ret0, _ := ret[0].([]storagelayer.EmployeeDBScheme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesByCompanyAndDepartment indicates an expected call of GetEmployeesByCompanyAndDepartment.
func (mr *MockStorageMockRecorder) GetEmployeesByCompanyAndDepartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesByCompanyAndDepartment", reflect.TypeOf((*MockStorage)(nil).GetEmployeesByCompanyAndDepartment), arg0, arg1)
}

// GetEmployeesByCompanyId mocks base method.
func (m *MockStorage) GetEmployeesByCompanyId(arg0 int) ([]storagelayer.EmployeeDBScheme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeesByCompanyId", arg0)
	ret0, _ := ret[0].([]storagelayer.EmployeeDBScheme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesByCompanyId indicates an expected call of GetEmployeesByCompanyId.
func (mr *MockStorageMockRecorder) GetEmployeesByCompanyId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesByCompanyId", reflect.TypeOf((*MockStorage)(nil).GetEmployeesByCompanyId), arg0)
}

// UpdateById mocks base method.
func (m *MockStorage) UpdateById(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockStorageMockRecorder) UpdateById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockStorage)(nil).UpdateById), arg0, arg1)
}
